
%************************************************************************************************************************************************************
%FUNCTION WILL INITIALIZE A SAMPLING TRAJECTORY AND GRANT IT A UNIQUE ID NUMBER, ALL TRAJECTORIES WILL BE STORED IN trajectories.m 
%takes in data, initializes trajectery in output_file_name which should have been generated by makefretdata, makefrets or raw data
%************************************************************************************************************************************************************

%************************************************************************************************************************************************************
%arguments are as follows:
%data_list_index = index of the parent job list
%out_index = the index of the trajectory being initialized,
%state_count = the number of states in the run,
%opt (to be moved to data files) = whether you wish to sample contrived or actual data. 0 = contrived, any other real (and probably complex knowing matlab)number = actual 
%************************************************************************************************************************************************************



function initialize(data_list_index, out_index, state_count,opt)

%************************************************************************************************************************************************************
% Set the number of states and initialize the variables
% numstates: number of states to be sampled
% muguess: a vector of guessed means for each state. Each index value corresponds to a numbered state
% sigmaguess: a vector of instantaneous sigma guesses. Each index corresponds to a numbered state
% transitionguess: a transition matrix representing the transition probabilities between each state
%************************************************************************************************************************************************************


numstates = state_count;
muguess = zeros(1,numstates);
sigmaguess = zeros(1,numstates); 
transitionguess = zeros(numstates,numstates);	

%************************************************************************************************************************************************************
% Load in the fret data from a list file
%************************************************************************************************************************************************************

inid = strcat('data_list_', int2str(data_list_index)); 
s = inid;  
eval(s); 
%indid = strcat('data_set_', int2str(data_list_index));

%************************************************************************************************************************************************************
%We now have a list of data files. 
%We now go to each data set in the list and append it to the observations list, each seperated by negative one thousands 
%In the process we eliminate ludicrous fret values with the filter function (values greater then one or less then zero that are not delimiters)
%************************************************************************************************************************************************************

clear fretdata
s = strcat('load ', ' data_set_', int2str(data_list(1)));
eval(s);
observations = fretdata; 
% observation_sets(1).data = filterfrets(fretdata); 
observation_sets(1).data = fretdata; 

len = length(data_list); 

for i = 2:len,
	clear fretdata;
	s = strcat('load ',int2str(data_list(i)),'/data/data_set_', int2str(data_list(i)));
	eval(s);
	observations = [observations -1000 fretdata];
%	observation_sets(i).data = filterfrets(fretdata);
	observation_sets(i).data = fretdata;
end

%observation_sets(find(observation_sets.data == [])) = []; 
	
%observations = filterfrets(observations); 

%************************************************************************************************************************************************************
%datalength is the length of observations INCLUDING  the neg one thousand delimiters
%cells within stateguess corresponding to delimeters will stay at zero
%************************************************************************************************************************************************************


datalength = length(observations); 
stateguess = int8(zeros(1,datalength));

%************************************************************************************************************************************************************
% Initialize guess for mu and sigma *** UPDATE THIS LATER ***
%CREATE RANDOMLY DRAWN EVENLY SPACED STARTING MU VALUES
%***********************************************************************************************************************************************************

m = rand()*(1/numstates); 
muguess = zeros(1,numstates); 
for i = 1:numstates,
	muguess(i) = m + ((i-1)*(1/numstates));
end


%***********************************************************************************************************************************************************
%initialize sigmas to 0.1
%***********************************************************************************************************************************************************

sigmaguess = ones(1,numstates);
sigmaguess = sigmaguess./10; 


%***********************************************************************************************************************************************************
% Initialize state as closest mu
% for  each observation that is not a zero delimiter we take the closest mu and assign an observation to the mu's corresponding state. 
%***********************************************************************************************************************************************************

for i = 1:datalength,	
 if observations(i) ~= -1000,	      
  x = abs(muguess - observations(i));
  z = find(x==min(x));			
  stateguess(i) = z; 		
 end
end
    

%***********************************************************************************************************************************************************
%set number of correct guesses to zero 
%this will only be employed for contrived data
%***********************************************************************************************************************************************************

correct = 0; 



%***********************************************************************************************************************************************************
%GUESS_COUNTS WILL BE USED TO CALCULATE SPECIFICITY AND SENSITIVITY IN ANALYZE DATA FUNCTION 
%keeps track of correct and incorrect guess for each state 
%the first row is a count of correct guesses (true positive)
%the second row is a count of the incorrect guesses (false positive)
%the third row is a count of true negatives
%the fourth row is a count of false negatives
%each column corresponds to a state
%***********************************************************************************************************************************************************


guess_counts = zeros(4,numstates);  

sample_num = 0; 

origin_index = data_list_index;

%***********************************************************************************************************************************************************
%although not necessary we initialize our all matrices
%***********************************************************************************************************************************************************

allmu = []; 
allsigma = []; 
alltransitions = [];
allstates = []; 


%***********************************************************************************************************************************************************
%INITIALIZE TRAJECTORY FILE
%By writing to it
%***********************************************************************************************************************************************************

writeout; 
